{
	'onLoad': 'x = 1;',
	'description': 'test automaton',
	'scriptLanguage': 'Python',
	'nodes':
	[
		{
			'id': 'start',
			'name': 'start_name',
			'description': 'node_description',
			'initial': true,
			'onEnter': 'x = 10',
			'onLeave': 'x++;',
			'wait': false,
			'outgoingEdges':
			[
				{
					'id': 'to_failing',
					'name': 'to_failing_name',
					'description': 'edge_description',
					'destination': 'failing',
					'timeIntervalSinceLastMicrotransition': {
						'min': { 'value': '10', 'unit': 's', 'isInclusive': true },
						'max': { 'value': '20', 'unit': 'm', 'isInclusive': false }
					},
					'checkExp': 'x % 2 == 0',
					'onWalk': 'engine.info("info msg"); engine.debug("debug msg"); engine.reject("We\'re finished"); engine.getLogEntry();',
					'requiredConditions': 'one',
				},
				{
					'id': 'to_success',
					'name': 'to_success_name',
					'destination': 'success',
					'regExp': '[A-Z]*',
					'triggerOnEof': false,
					'timeIntervalSinceLastTransition': '55',
					'timeIntervalSinceAutomatonStart': '100',
					'timeIntervalForEvent': 365
				},
				{
					'id': 'several_criteria',
					'destination': 'dummy',
					'regExp': '[^A-Z]',
					'triggerAlways': true,
					'triggerOnEof': true,
					'requiredConditions': 'all',
					'channel': 'chan'
				}
			]
		},
		{
			'id': 'failing',
			'name': 'failing_name',
			'failure': true,
			'wait': true
		},
		{
			'id': 'success',
			'name': 'success_name',
			'success': true,
			'successCheckExp': 'true'
		},
		{
			'id': 'dummy',
			'name': 'dummy_name',
			'outgoingEdges':
			[
			]
		}
	]
}
